import logging
import aiogram.types
from database import db
import scenarios.uploadFile as uploadFile
from create_bot import bot
from aiogram import types
from aiogram.dispatcher.filters import Text
from utils import *

MSG_ABOUT_OUR_GROUP = "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @telega_for_students, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ " \
                      "–∏ –Ω–æ–≤–æ—Å—Ç–µ–π ü§©"


def mess_about_user(userData):
    username = userData['username']
    date = userData['login']

    faculty = userData['faculty']
    direction = userData['direction']
    course = userData['course']

    msg = f"""–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{username}*
–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: *{date}*
–§–∞–∫—É–ª—å—Ç–µ—Ç: *{faculty}*
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{direction}*
–ö—É—Ä—Å: *{course}*"""
    return msg


async def callback_menu(callback: aiogram.types.CallbackQuery,
                        state: aiogram.dispatcher.FSMContext):
    """
    –í—ã–∑–æ–≤ –º–µ–Ω—é, —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ callback
    
    :param state: aiogram.dispatcher.FSMContext
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :return: None
    """
    await show_menu(callback.message, state, True)


async def show_menu(message: aiogram.types.Message,
                    state: aiogram.dispatcher.FSMContext,
                    edit=False):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
    :param state: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param edit: –µ—Å–ª–∏ True, —Ç–æ –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é. –ò–Ω–∞—á–µ –ø—Ä–∏—à–ª–µ—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    :param message: –æ–±—ä–µ–∫—Ç aiogram.types.Message
    –∏–Ω–∞—á–µ –ø—Ä–∏—à–ª–µ—Ç –º–µ–Ω—é –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :return: None
    """
    await state.finish()

    chat_id = message.chat.id
    message_id = message.message_id

    # ----- –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ

    try:
        await bot.get_chat_member(chat_id="@telega_for_students", user_id=chat_id)
    except:
        await bot.send_message(chat_id=chat_id, text=MSG_ABOUT_OUR_GROUP)
        edit = False

    # -----

    msg = "–ú–µ–Ω—é:"
    buttons = [
        [types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_setting")],
        [types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", callback_data="menu_info")],
        [types.InlineKeyboardButton(text="–ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="menu_myFiles")],
        [types.InlineKeyboardButton(text="–ù–∞–π—Ç–∏ —Ñ–∞–π–ª", callback_data="menu_findFile")],
        [types.InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="menu_feedback")]
    ]

    user_info = db.get_user_by_id(chat_id)
    if user_info is None or len(user_info) == 0:
        return

    user_info = user_info[0]
    if user_info[0] == 708133213:
        buttons.append([types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞", callback_data="admin_menu")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    if edit:
        await bot.edit_message_text(text=msg, chat_id=chat_id, reply_markup=keyboard, message_id=message_id)
    else:
        await bot.send_message(text=msg, chat_id=chat_id, reply_markup=keyboard)

async def profile_settings(callback: aiogram.types.CallbackQuery):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :return: None
    """
    message_id = callback.message.message_id
    chat_id = callback.message.chat.id

    user = db.get_user_by_id(chat_id)
    if user is None or len(user) == 0:
        logging.error(f"User not found in profile_settings, user_id = {chat_id}")
        return
    user = user[0]
    msg = mess_about_user(user)
    buttons = [
        [types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_user_data")],
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(
        chat_id=chat_id,
        reply_markup=keyboard,
        text=msg,
        message_id=message_id,
        parse_mode=types.ParseMode.MARKDOWN)

async def profile_information(callback: aiogram.types.CallbackQuery):
    """
    –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –±–æ—Ç–µ
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :return: None
    """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    msg = """
–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º, –∑–∞—á–µ—Ç–∞–º –∏ —ç–∫–∑–∞–º–µ–Ω–∞–º.
–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã(–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç—ã pdf), –∏—Å–∫–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–≤–æ–µ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é/–∫—É—Ä—Å—É/–ø—Ä–µ–¥–º–µ—Ç—É
–°–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ—Ç—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –∏ –±–∞–≥–∏.
–í—Å–µ –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–º–æ—á—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ, –ø—Ä–æ—à—É –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ: @AtikinNT
"""
    buttons = [
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(chat_id=chat_id, reply_markup=keyboard, text=msg, message_id=message_id)

async def profile_MyFiles(callback: aiogram.types.CallbackQuery):
    """
    –ú–µ–Ω—é —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ñ–∞–π–ª–æ–≤|–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, —Ç–æ –µ—â–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –§–∞–π–ª—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :return: None
    """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    msg = "–í–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
    buttons = [
        [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="profile_newFile")],
        [types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ñ–∞–π–ª–æ–≤", callback_data="profile_fileList")],
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    user_info = db.get_user_by_id(chat_id)
    if user_info is None or len(user_info) == 0:
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ profile_MyFiles. chat_id={chat_id}")
        return
    user_info = user_info[0]
    if user_info['is_admin']:
        buttons.append([types.InlineKeyboardButton(text="–§–∞–π–ª—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", callback_data="profile_fileListAdmin")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(chat_id=chat_id, reply_markup=keyboard, text=msg, message_id=message_id)

async def profile_newFile(callback: aiogram.types.CallbackQuery,
                          state: aiogram.dispatcher.FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param state: aiogram.dispatcher.FSMContext
    :return:
    """
    await uploadFile.ask_course(callback, state)

async def profile_fileList(callback: aiogram.types.CallbackQuery,
                           state: aiogram.dispatcher.FSMContext):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param state: aiogram.dispatcher.FSMContext
    :return: None
    """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    filesList = db.get_files_in_profile_page(chat_id)

    if filesList is None or len(filesList) == 0:
        await bot.edit_message_text(chat_id=chat_id, text="—É –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤(", message_id=message_id)
        return

    msg = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤:"
    buttons = []
    for file in filesList:
        buttons.append([types.InlineKeyboardButton(text=f"{file['filename']}", callback_data=f"{file['file_id']}")])
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=f"main_menu")])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(chat_id=chat_id, reply_markup=keyboard, text=msg, message_id=message_id)
    await state.set_state(UserFileList.showFile)

async def profile_fileListAdmin(callback: aiogram.types.CallbackQuery,
                                state: aiogram.dispatcher.FSMContext):
    """
    –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞)
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param state: aiogram.dispatcher.FSMContext
    :return: None
    """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    filesList = db.get_files_waiting_for_admin()
    if filesList is None or len(filesList) == 0:
        await callback.answer(text="–§–∞–π–ª–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ—Ç)", show_alert=True)
        return
    msg = "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ:"
    buttons = []
    for file in filesList:
        buttons.append([types.InlineKeyboardButton(text=f"{file['filename']}", callback_data=f"{file['file_id']}")])
    buttons.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(chat_id=chat_id, reply_markup=keyboard, text=msg, message_id=message_id)
    await state.set_state(FindFile.showFile)

async def profile_findFile(callback: aiogram.types.CallbackQuery,
                           state: aiogram.dispatcher.FSMContext):
    """
    –ü–æ–¥–º–µ–Ω—é –ø–æ –ø–æ–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤: –ü—Ä–µ–¥–º–µ—Ç—É|
    
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param state: aiogram.dispatcher.FSMContext
    :return: None
    """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    msg = "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ"
    buttons = [
        [types.InlineKeyboardButton(text="–ü—Ä–µ–¥–º–µ—Ç—É", callback_data="find_by_subject")],
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.edit_message_text(chat_id=chat_id, reply_markup=keyboard, text=msg, message_id=message_id)
    await state.set_state(FindFile.startFindFile)

async def profile_feedback(callback: aiogram.types.CallbackQuery,
                           state: aiogram.dispatcher.FSMContext):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param callback: –æ–±—ä–µ–∫—Ç aiogram.types.CallbackQuery
    :param state: aiogram.dispatcher.FSMContext
    :return: None
    """
    chat_id = callback.message.chat.id
    msg = "–ù–∞–ø–∏—à–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ " \
          "—Å–∫–æ—Ä–µ–µ –∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ üòâ"
    await bot.send_message(chat_id=chat_id, text=msg)
    await state.set_state(Admin.feedback)
    await callback.answer()

def register_handle_profileMenu(dp: aiogram.Dispatcher):
    dp.register_message_handler(show_menu, commands=['menu'], state="*")
    dp.register_callback_query_handler(callback_menu, Text(equals="main_menu"), state="*")
    dp.register_callback_query_handler(profile_settings, Text(equals="menu_setting"))
    dp.register_callback_query_handler(profile_information, Text(equals="menu_info"))
    dp.register_callback_query_handler(profile_MyFiles, Text(equals="menu_myFiles"))
    dp.register_callback_query_handler(profile_newFile, Text(equals="profile_newFile"))
    dp.register_callback_query_handler(profile_fileList, Text(equals="profile_fileList"))
    dp.register_callback_query_handler(profile_fileListAdmin, Text(equals="profile_fileListAdmin"))
    dp.register_callback_query_handler(profile_findFile, Text(equals="menu_findFile"))
    dp.register_callback_query_handler(profile_feedback, Text(equals="menu_feedback"))
